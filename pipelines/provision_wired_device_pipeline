
pipeline {
    agent
        { docker
            {
                reuseNode true
                image 'python:latest'
                args '--name DEV -v $HOME/DockerFiles:/root/DockerFiles -u root:sudo'
            }
    }

    environment {
        REPO_NAME = 'catalyst_center_as_code'
        GITHUB_USERNAME = 'zapodeanu'
        GITHUB_TOKEN = credentials('GITHUB_TOKEN')
        PIPELINE_NAME = 'Provision Device Workflow'
        PYTHON_APP_NAME = 'provision_wired_device.py'
        HOME = "${WORKSPACE}"
        HOSTNAME = "${hostname}"
        SITE_HIERARCHY = "${siteHierarchy}"
    }

    options {
        skipStagesAfterUnstable()
        timeout(time: 15, unit: 'MINUTES')
    }

    stages {
        stage ('Environment variables') {
            steps {
                echo('\n\nPipeline name: ' + PIPELINE_NAME + ' ..............................')
                echo('App name: ' + PYTHON_APP_NAME + ' ..............................')
                echo('GitHub repo name: ' + REPO_NAME + ' ..............................')
                echo('Workspace: ' + HOME + ' ..............................')
            }
        }
        stage ('Build Python Environment') {
            steps {
                echo('\n\nJenkins ' + PIPELINE_NAME + ' build start..............................')
                echo('\n\nBuilding the Docker container:..............................')
            }
        }
        stage ('Check Input Params') {
                steps {
                    echo 'Device hostname: ' + HOSTNAME
                    echo 'Site hierarchy: ' + SITE_HIERARCHY
            }
        }
         stage ('Pull or Clone the source code') {
            steps {
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    script {
                        if (fileExists(REPO_name)) {
                            echo('\n\nPull code from GitHub:..............................')
                            dir(REPO_NAME) {
                                sh 'git pull --ff-only https://' + GITHUB_USERNAME + ':' + GITHUB_TOKEN + '@github.com/' + GITHUB_USERNAME + '/' + REPO_NAME + '.git'
                            }
                        }
                        if (!fileExists(REPO_NAME)) {
                            echo('\n\nClone code from GitHub:..............................')
                            sh 'git clone https://' + GITHUB_USERNAME + ':' + GITHUB_TOKEN + '@github.com/' + GITHUB_USERNAME + '/' + REPO_NAME + '.git'
                        }
                    }
                }
            }
        }
        stage ('Install Python libraries') {
            steps {
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    sh 'pip install -r ' + REPO_NAME + '/requirements.txt --no-warn-script-location'
                    echo('\n\nVerify Python version and Libraries:..............................')
                    sh 'python --version'
                    sh 'pip3 list'
                    echo('\n\nVerify Application Files:..............................')
                    sh 'ls ' + REPO_NAME + '/'
                }
            }
        }
        stage ('Execute Python application') {
            steps {
                echo('\n\nApp ' + PIPELINE_NAME + ' run:..............................')
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    echo('\n\nVerify Working Path:..............................')
                    sh 'pwd'
                    dir(REPO_NAME) {
                        sh 'python3 ' + PYTHON_APP_NAME + ' ' + HOSTNAME + ' ' + SITE_HIERARCHY
                    }
                }
            }
        }
    }
    post {
        always {
            echo '\n\nJenkins ' + PIPELINE_NAME + ' build end'
        }
    }
}